user www www;
    worker_processes auto;
    error_log /www/wwwlogs/nginx_error.log crit;
    pid /www/server/nginx/logs/nginx.pid;
    worker_rlimit_nofile 51200;

    events {
            use epoll;
            worker_connections 51200;
            multi_accept on;
    }

    http {
        include mime.types;
            #include luawaf.conf;
                include proxy.conf;
                default_type application/octet-stream;
                server_names_hash_bucket_size 512;
                client_header_buffer_size 32k;
                large_client_header_buffers 4 32k;
                client_max_body_size 50m;
                sendfile on;
                tcp_nopush on;
                keepalive_timeout 60;
                tcp_nodelay on;
                fastcgi_connect_timeout 300;
                fastcgi_send_timeout 300;
                fastcgi_read_timeout 300;
                fastcgi_buffer_size 64k;
                fastcgi_buffers 4 64k;
                fastcgi_busy_buffers_size 128k;
                fastcgi_temp_file_write_size 256k;
                fastcgi_intercept_errors on;
                gzip on;
                gzip_min_length 1k;
                gzip_buffers 4 16k;
                gzip_http_version 1.1;
                gzip_comp_level 2;
                gzip_types text/plain application/javascript application/x-javascript text/javascript text/css application/xml;
                gzip_vary on;
                gzip_proxied expired no-cache no-store private auth;
                gzip_disable "MSIE [1-6]\.";
                limit_conn_zone $binary_remote_addr zone=perip:10m;
                limit_conn_zone $server_name zone=perserver:10m;
                server_tokens off;
                access_log off;

        server {
            listen 888;
            server_name phpmyadmin;
            index index.html index.htm index.php;
            root /www/server/phpmyadmin;
                                           #error_page   404   /404.html;
            include enable-php.conf;
            location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$ {
                expires 30d;
            }

            location ~ .*\.(js|css)?$ {
                expires 12h;
            }

            location ~ /\. {
                deny all;
            }
            access_log /www/wwwlogs/access.log;
        }
        include /www/server/panel/vhost/nginx/*.conf;

        server {
            listen 81;
            server_name 121.36.47.82;
            root /data/node/zhouwei_address;
            #charset koi8-r;
            set $node_port 8360;

            access_log logs/host.access.log;

            location / {
                #   指定允许跨域的方法，*代表所有
                add_header Access-Control-Allow-Methods *;

                #   预检命令的缓存，如果不缓存每次会发送两次请求
                add_header Access-Control-Max-Age 3600;Yz77889900
                #   带cookie请求需要加上这个字段，并设置为true
                add_header Access-Control-Allow-Credentials true;

                #   表示允许这个域跨域调用（客户端发送请求的域名和端口）
                #   $http_origin动态获取请求客户端请求的域   不用*的原因是带cookie的请求不支持*号
                add_header Access-Control-Allow-Origin $http_origin;

                #   表示请求头的字段 动态获取
                # add_header Access-Control-Allow-Headers
                # $http_access_control_request_headers;
                add_header Access-Control-Allow-Headers uthorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,X-Data-Type,X-Requested-With,X-Data-Type,X-Auth-Token,token;

                if ( $request_method = 'OPTIONS' ) {
                    add_header Access-Control-Allow-Origin $http_origin;
                    add_header Access-Control-Allow-Headers Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,X-Data-Type,X-Requested-With,token;
                    add_header Access-Control-Allow-Methods GET,POST,OPTIONS,HEAD,PUT;
                    add_header Access-Control-Allow-Credentials true;
                    add_header Access-Control-Allow-Headers X-Data-Type,X-Auth-Token;
                    return 200;
                }


                index index.js index.html index.htm;

                if ( -f $request_filename/index.html ) {
                    rewrite (.*) $1/index.html break;
                }
                if ( !-f $request_filename ) {
                    rewrite (.*) /index.js;
                }
                location = /index.js {
                    proxy_http_version 1.1;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header Host $http_host;
                    proxy_set_header X-NginX-Proxy true;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_pass http://127.0.0.1:$node_port$request_uri;
                    proxy_redirect off;
                }

                location ~ /static/ {
                    etag on;
                    expires max;
                }

            }
        }

        server {
            listen 82;
            server_name 121.36.47.82;
            root /data/node/zhouwei_address;
            #charset koi8-r;
            set $node_port 8361;

            access_log logs/host.access.log;

            location / {
                #   指定允许跨域的方法，*代表所有
                add_header Access-Control-Allow-Methods *;

                #   预检命令的缓存，如果不缓存每次会发送两次请求
                add_header Access-Control-Max-Age 3600;Yz77889900
                #   带cookie请求需要加上这个字段，并设置为true
                add_header Access-Control-Allow-Credentials true;

                #   表示允许这个域跨域调用（客户端发送请求的域名和端口）
                #   $http_origin动态获取请求客户端请求的域   不用*的原因是带cookie的请求不支持*号
                add_header Access-Control-Allow-Origin $http_origin;

                #   表示请求头的字段 动态获取
                # add_header Access-Control-Allow-Headers
                # $http_access_control_request_headers;
                add_header Access-Control-Allow-Headers uthorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,X-Data-Type,X-Requested-With,X-Data-Type,X-Auth-Token,token;

                if ( $request_method = 'OPTIONS' ) {
                    add_header Access-Control-Allow-Origin $http_origin;
                    add_header Access-Control-Allow-Headers Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,X-Data-Type,X-Requested-With,token;
                    add_header Access-Control-Allow-Methods GET,POST,OPTIONS,HEAD,PUT;
                    add_header Access-Control-Allow-Credentials true;
                    add_header Access-Control-Allow-Headers X-Data-Type,X-Auth-Token;
                    return 200;
                }


                index index.js index.html index.htm;

                if ( -f $request_filename/index.html ) {
                    rewrite (.*) $1/index.html break;
                }
                if ( !-f $request_filename ) {
                    rewrite (.*) /index.js;
                }
                location = /index.js {
                    proxy_http_version 1.1;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header Host $http_host;
                    proxy_set_header X-NginX-Proxy true;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_pass http://127.0.0.1:$node_port$request_uri;
                    proxy_redirect off;
                }

                location ~ /static/ {
                    etag on;
                    expires max;
                }

            }
        }
        server {
            listen 8000;
            server_name 121.36.47.82;
            root /data/node/zhouwei_admin/dist;

            index index.js index.html index.htm;
            location / {
                if (!-e $request_filename) {
                    rewrite ^/(.*)$ /index.html last;
                    break;
                }
            }

            location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|ico)$ {
                expires 30d;
            }

            location ~ .*\.(js|css)?$ {
                expires 30d;
            }
        }
    }

